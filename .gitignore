# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage

# nyc test coverage
.nyc_output

# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# TypeScript v1 declaration files
typings/

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env

# next.js build output
.next






        .pipe(gulp.dest('./src/css'))
});

//合并js文件
gulp.task("js", function() {
    return gulp.src("./src/js/**/*.js")
        //压缩
        .pipe(uglify())
})


gulp.task('dserver', function() {
    return gulp.src('src')
        .pipe(server({
            host: '169.254.195.95',
            port: 8080,
            // open: true,
            livereload: true,
            middleware: function(req, res, next) {
                var pathname = url.parse(req.url).pathname;
                if (pathname === '/api/product') {
                    res.end(JSON.stringify({ code: 1, data: productsdata }))
                } else {
                    pathname = pathname === '/' ? 'index.html' : pathname;
                    res.end(fs.readFileSync(path.join(__dirname, 'src', pathname)))
                }
            }
        }))
})


gulp.task('dev', function() {
    gulp.series('sass', 'dserver', 'auto')
})

gulp.task('zipCss', function() {
    gulp.src('./src/css/**/*.js')
        .pipe(cleanCss())
        .pipe(rename(function(path) {
            path.basename += '.min'
        }))
        .pipe(gulp.dest('./build/css'))
})

gulp.task('zipjs', function() {
    gulp.src('./src/js/**/*.js')
        .pipe(babel({
            presets: ['@babel/env']
        }))
        .pipe(rename(function(path) {
            path.basename += '.min'
        }))
        .pipe(gulp.dest('./build/js'))
})

